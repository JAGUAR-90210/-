#Если Клиент Тогда

///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мНетОшибки;
Перем мОшибкаПараметровНастройки;
Перем мОшибкаЗагрузкиДрайвера;
Перем мОшибкаНеизвестно;
Перем мОшибкаПриПодключении;
Перем мОшибкаТестНеПройден;

Перем мПрефикс;
Перем мМодели;
Перем мИдентификатор;

Перем мПараметрыУстройства;
Перем мПараметрыПодключения;
Перем мВходныеПараметры;
Перем мВыходныеПараметры;

///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает номер версии API, поддерживаемой обработкой обслуживания.
//
// Номер версии задаётся следующим образом: Ver = Vmajor + Vminor / 100.0.
// Например, в случае, если данная функция возвращает значение «1.01», это
// означает, что данная обработка  имеет версию «1.1», полностью поддерживает
// версию «1.0» и содержит некоторые дополнительные элементы.
// В случае, если отличается целая часть версии (например, «2.1»), то это
// означает, что данная обработка несовместима с версией API «1.0».
//
// Функция является обязательной для любой версии API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Число> - Версия API обработки обслуживания.
//
//
Функция ПолучитьВерсиюAPI() Экспорт

	Результат = 2.05;
	Возврат Результат;

КонецФункции // ПолучитьВерсиюAPI()

// Функция возвращает описание текущей обработки обслуживания (API v2.0).
//
// Данная функция позволяет серверу получить информацию об обработке
// обслуживания. Функция является обязательной для версий 1.X API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Структура> - Структура, содержащая описание текущей обработки.
//                Структура имеет следующие поля:
//
//                Вид              - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид торгового оборудования, поддерживаемый
//                                   данной обработкой обслуживания.
//
//                СписокМоделей    - <Массив>
//                                 - Список поддерживаемых обработкой моделей
//                                   торгового оборудования.
//
//                Наименование     - <Строка>
//                                 - Наименование обработки обслуживания.
//
//                Описание         - <Строка>
//                                 - Описание обработки обслуживания.
//
//                ВерсияОбработки  - <Число>
//                                 - Номер версии обработки обслуживания
//                                   (не версии API!!!).
//                                   Данный параметр используется при
//                                   обновлении.
//                                   Номер версии задаётся следующим образом:
//                                   Ver = Vmajor + Vminor / 100.0.
//
Функция ПолучитьОписание() Экспорт

	Результат = Новый Структура("Вид, СписокМоделей, Наименование, Описание, ВерсияОбработки, Идентификатор");
	
	мМетаданные               = Метаданные();
	Результат.Вид             = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт;
	
	// тут надо поменять !!
	Модели    = Новый Массив();
	Модели.Добавить("IronLogic:Считыватель магнитных карт");
	Результат.СписокМоделей   = Модели;
	
	
	Результат.Наименование    = мМетаданные.Синоним;
	Результат.Описание        = мМетаданные.Комментарий;
	Результат.ВерсияОбработки = 1.611;
	Результат.Идентификатор   = мИдентификатор;

	Возврат Результат;

КонецФункции // ПолучитьОписание()

// Функция создаёт объект драйвера.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Выходной параметр; объект драйвера торгового
//                                   оборудования.
//
//  Модель                         - <Строка>
//                                 - Модель торгового оборудования, для которой
//                                   создаётся экземпляр драйвера.
//
//  Параметры                      - <Строка>
//                                 - Параметры подключаемого торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция СоздатьОбъектДрайвера(Объект, Модель, Параметры) Экспорт

	Результат      = мНетОшибки;
	ОписаниеОшибки = "";
	ИДУстройства   = Неопределено;


	Попытка 
		
		Макет = ПолучитьМакет("ИнтеграционнаяКомпонента");
		Адрес = ПоместитьВоВременноеХранилище(Макет);
		ПодключитьВнешнююКомпоненту(Адрес, "ИнтеграционнаяКомпонента", ТипВнешнейКомпоненты.Native); 
		Драйвер = Новый("AddIn.ИнтеграционнаяКомпонента.ZR1CExtension");
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		Результат = мОшибкаЗагрузкиДрайвера;			
		ОписаниеОшибки = "Невозможно подключить внешнюю компоненту.
		| Проверьте, что внешняя компонента корректно установлена и имеет ту же версию, 
		| что и требуемая обработкой обслуживания.";
	КонецПопытки;

	Если Результат = мНетОшибки Тогда
		Попытка
			мВерсияИзДрайвера = Драйвер.ПолучитьНомерВерсии();
		Исключение
			Сообщить("""" + Модель + """:" + Символы.ПС +
			"Внимание! Невозможно определить версию драйвера." + Символы.ПС +
			"Корректная работа драйвера не гарантируется", СтатусСообщения.Внимание);
		КонецПопытки;
		
		Объект = Новый Структура("Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства",
		                          Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства);
								  
		мПараметрыУстройства = Параметры;
		мПараметрыУстройства.Вставить("Идентификатор", Объект.Модель);								  
								  
	КонецЕсли;


	Возврат Результат;

КонецФункции // СоздатьОбъектДрайвера()

// Функция возвращает набор событий драйвера и параметры их обработки для
// заданной модели торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект            - <*>
//                    - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица значений, содержащая информацию о внешних
//                      событиях, генерируемых драйвером.
//                      Таблица имеет следующие колонки:
//                       "ИмяСобытия" - <Строка> - Имя внешнего события.
//
Функция ПолучитьОписаниеСобытий(Объект) Экспорт

	Таблица = Новый ТаблицаЗначений();

	Таблица.Колонки.Добавить("ИмяСобытия");
	СтрокаТаблицы            = Таблица.Добавить();
	СтрокаТаблицы.ИмяСобытия = "ДанныеКарты"; //Объект.Драйвер.Порт; //Объект.Драйвер.ИмяСобытия;

	Возврат Таблица;

КонецФункции // ПолучитьОписаниеСобытий()

// Функция осуществляет подключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция Подключить(Объект) Экспорт

	Результат = мНетОшибки;

	мПараметрыУстройства = Объект.Параметры;
	
	мПараметрыУстройства.Вставить("Идентификатор", Объект.Модель);
	
	РезультатПодключения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ПодключитьУстройство(
		Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения, мВыходныеПараметры);
		
	Если Не РезультатПодключения Тогда
		Результат = мОшибкаПриПодключении;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // Подключить()

// Процедура осуществляет отключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект - <*>
//         - Объект драйвера торгового оборудования.
//
Процедура Отключить(Объект) Экспорт

	ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ОтключитьУстройство(Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения, мВыходныеПараметры);

КонецПроцедуры // Отключить()

// Функция осуществляет проверку правильности настройки и подключения
// торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства, проверка
//                                   которого предполагается.
//
//  ОписаниеРезультата             - <Строка>
//                                 - Выходной параметр; в случае, если тест
//                                   завершился неудачно, в данный параметр
//                                   помещается рекомендация для пользователя
//                                   (как ему действовать дальше).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТестУстройства(Объект) Экспорт

	РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ТестУстройства",
		, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);

	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ТестУстройства()

// Процедура осуществляет вызов формы настройки торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Модель    - <Строка>
//            - Модель настраиваемого оборудования.
//
//  Параметры - <Структура>
//            - Входной/выходной параметр; структура параметров.
//
Процедура НастроитьОборудование(Модель, Параметры) Экспорт

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыОборудования", Параметры);
	ПараметрыФормы.Вставить("Идентификатор", Модель);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ФормаНастройкиУниверсальныйДрайвер", ПараметрыФормы);
	
	Если Результат <> Неопределено Тогда
		Параметры = Результат.ПараметрыОборудования;
	КонецЕсли;


КонецПроцедуры // НастроитьОборудование()

// Функция возвращает имя источника внешнего события 
// генерируемое при подключеннии внешней компонентой.
// По уникальному для сеанса подключения имени производится поиск 
// из конфигурации обработки обслуживания для обработки полученного
// события.
// (API v2.1)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства.
//
// Возвращаемое значение:
//  <Строка> - Имя внешнего источника события.
//
Функция ПолучитьИмяИсточникаВнешнегоСобытия(Объект) Экспорт

	Возврат Объект.Параметры.P_Port;//"Считыватель магнитных карт";

КонецФункции







///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ФУНКЦИИ API ОБРАБОТОК ОБСЛУЖИВАНИЯ СМК)

// Функция осуществляет обработку внешних событий торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Событие                        - <Строка>
//                                 - Строка, идентифицирующая событие.
//
//  Данные                         - <Строка>
//                                 - Данные, связанные с событием.
//
//  КодКарты                       - <Строка>
//                                 - Выходной параметр; код считанной карты.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеСМК(Объект, Событие, Данные, КодКарты) Экспорт

	Результат = мНетОшибки;
	КодКарты  = Данные;

//	Объект.Драйвер.ПосылкаДанных = 0;
//	ПозицияПрефикса = 0;
//	ПозицияСуффикса = 0;
//	времКодКарты    = "";
//	ДанныеКарты = "";
//	ПозицияДляЧтения = 1;
//	РазделительДорожек = ?(Объект.Параметры.РазделительДорожек = 0, "", Символ(Объект.Параметры.РазделительДорожек));

//	Для НомерДорожки = 1 По 3 Цикл
//		ТекущаяДорожка = Объект.Параметры.ПараметрыДорожек[НомерДорожки - 1];
//		Если ТекущаяДорожка.Использовать Тогда
//			ПрефиксДрайвера = Символ(ТекущаяДорожка.Префикс);
//			СуффиксДрайвера = Символ(ТекущаяДорожка.Суффикс);

//			Если ПозицияДляЧтения < СтрДлина(КодКарты) Тогда
//				ДанныеКарты = Сред(КодКарты, ПозицияДляЧтения);

//				ПозицияПрефикса = Найти(ДанныеКарты, ПрефиксДрайвера);
//				ПозицияСуффикса = Найти(ДанныеКарты, СуффиксДрайвера);

//				времПозицияПрефикса = ?(ПозицияПрефикса = 0, 1, ПозицияПрефикса + СтрДлина(ПрефиксДрайвера));
//				времДлинаДоСуффикса = ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты) + 1 - времПозицияПрефикса, ПозицияСуффикса - времПозицияПрефикса);
//				времКодКарты = времКодКарты + Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса) 
//				 + ?(НомерДорожки = 3, "", РазделительДорожек);

//				ПозицияДляЧтения = ПозицияДляЧтения + ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты), ПозицияСуффикса + СтрДлина(СуффиксДрайвера) - 1);
//			КонецЕсли;
//		Иначе
//			времКодКарты = времКодКарты + ?(НомерДорожки = 3, "", РазделительДорожек);
//		КонецЕсли;
//	КонецЦикла;

//	КодКарты = времКодКарты;

	Возврат Результат;

КонецФункции // ОбработатьВнешнееСобытиеСШК()

// Процедура вызывается, когда система готова принять следующее событие от устройства.
// (API v2.0)
//
// Параметры:
//  Объект - <*>
//         - Объект драйвера торгового оборудования.
//
Процедура СобытиеОбработано(Объект, РезультатОбработки = Истина) Экспорт

	//Объект.Драйвер.ПосылкаДанных = 1;

КонецПроцедуры // СобытиеОбработано()


///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНетОшибки                 = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаПараметровНастройки = Перечисления.ТООшибкиОбщие.ОшибкаПараметровНастройки;
мОшибкаЗагрузкиДрайвера    = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиДрайвера;
мОшибкаНеизвестно          = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;
мОшибкаПриПодключении      = Перечисления.ТООшибкиОбщие.ОшибкаПриПодключении;
мОшибкаТестНеПройден       = Перечисления.ТООшибкиОбщие.ОшибкаТестНеПройден;

мИдентификатор   = Новый УникальныйИдентификатор;

мПараметрыУстройства = Новый Структура();
мПараметрыПодключения = Новый Структура();
мВходныеПараметры = Новый Массив();
мВыходныеПараметры = Новый Массив();

#КонецЕсли